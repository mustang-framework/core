<?php

namespace App\Containers\{{section-name}}\{{container-name}}\Tests\Unit;

use App\Containers\{{section-name}}\{{container-name}}\Models\{{model}};
use App\Containers\{{section-name}}\{{container-name}}\Tasks\Update{{model}}Task;
use App\Containers\{{section-name}}\{{container-name}}\Tests\TestCase;
use App\Ship\Exceptions\NotFoundException;

/**
 * Class {{class-name}}.
 *
 * @group {{_container-name}}
 * @group unit
 */
class {{class-name}} extends TestCase
{
    // TODO TEST
    public function testUpdate{{model}}(): void
    {
        ${{_model}} = {{model}}::factory()->create([
            // 'some_field' => 'new_field_value',
        ]);
        $data = [
            // 'some_field' => 'new_field_value',
        ];

        $updated{{model}} = app(Update{{model}}Task::class)->run($data, ${{_model}}->id);

        $this->assertEquals(${{_model}}->id, $updated{{model}}->id);
        // assert if fields are updated
        // $this->assertEquals($data['some_field'], $updated{{model}}->some_field);
    }

    public function testUpdate{{model}}WithInvalidId(): void
    {
        $this->expectException(NotFoundException::class);

        $noneExistingId = 777777;

        app(Update{{model}}Task::class)->run([], $noneExistingId);
    }
}
